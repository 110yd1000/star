openapi: 3.0.3
info:
  title: Stardust Classifieds - Accounts API
  version: 2.0.0
  description: |
    Enhanced API endpoints for user registration, authentication, verification, and management.
    
    ## Authentication
    This API uses JWT Bearer tokens for authentication. Include the token in the Authorization header:
    `Authorization: Bearer <your-token>`
    
    ## Rate Limiting
    - Authentication endpoints: 5 requests per minute per IP
    - Password reset: 3 requests per hour per IP
    - OTP verification: 10 attempts per hour per phone/email
    
    ## Error Handling
    All error responses follow a consistent format with detailed error codes and messages.

servers:
  - url: https://api.stardustclassifieds.com/v2
    description: Production server
  - url: https://staging-api.stardustclassifieds.com/v2
    description: Staging server

paths:
  /health:
    get:
      summary: Health check endpoint
      tags: [System]
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/register/:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              with_email:
                summary: Registration with email
                value:
                  email: "user@example.com"
                  full_name: "John Doe"
                  password: "SecurePass123!"
              with_phone:
                summary: Registration with phone
                value:
                  phone_number: "+27123456789"
                  full_name: "Jane Smith"
                  password: "SecurePass123!"
              with_both:
                summary: Registration with both email and phone
                value:
                  email: "user@example.com"
                  phone_number: "+27123456789"
                  full_name: "John Smith"
                  password: "SecurePass123!"
      responses:
        '201':
          description: User registered successfully (pending verification)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/login/:
    post:
      summary: Login using phone or email
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            examples:
              email_login:
                summary: Login with email
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
              phone_login:
                summary: Login with phone
                value:
                  phone: "+27123456789"
                  password: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Account not verified or deactivated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/logout/:
    post:
      summary: Logout and invalidate tokens
      tags: [Authentication]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Refresh token to invalidate
              required: [refresh_token]
            example:
              refresh_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully logged out"
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/token/refresh/:
    post:
      summary: Refresh JWT access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  description: Valid refresh token
              required: [refresh]
            example:
              refresh: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
      responses:
        '200':
          description: New access token generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefreshResponse'
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/password/change/:
    post:
      summary: Change password for authenticated user
      tags: [Password Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
            example:
              current_password: "OldPassword123!"
              new_password: "NewSecurePass456!"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          description: Invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Password validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/password/reset/:
    post:
      summary: Request password reset
      tags: [Password Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_or_email:
                  type: string
                  description: User's phone number or email address
                  example: "user@example.com"
              required: [phone_or_email]
      responses:
        '200':
          description: Password reset token sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset instructions sent"
                  delivery_method:
                    type: string
                    enum: [email, sms]
                    example: "email"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/password/reset/confirm/:
    post:
      summary: Confirm password reset with token
      tags: [Password Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
            example:
              token: "abc123def456"
              new_password: "NewSecurePass789!"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Password validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    /api/accounts/password/reset/resend/:
    post:
      summary: Resend password reset token
      tags: [Password Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_or_email:
                  type: string
                  description: User's phone number or email address
                  example: "+27123456789"
              required: [phone_or_email]
      responses:
        '200':
          description: Password reset token resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset instructions resent"
                  delivery_method:
                    type: string
                    enum: [email, sms]
                    example: "email"
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              

  /api/accounts/verify/email/:
    post:
      summary: Verify email address with token
      tags: [Verification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  description: Email verification token
                  example: "abc123def456ghi789"
              required: [key]
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully"
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid or expired verification key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Verification key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/verify/email/resend/:
    post:
      summary: Resend email verification
      tags: [Verification]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email sent"
        '400':
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/verify/phone/:
    post:
      summary: Verify phone number with OTP
      tags: [Verification]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
                  description: Phone number in E.164 format
                  example: "+27123456789"
                otp:
                  type: string
                  pattern: '^\d{6}$'
                  description: 6-digit OTP code
                  example: "123456"
              required: [phone, otp]
      responses:
        '200':
          description: Phone number verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Phone number verified successfully"
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid OTP or phone number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Phone number not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many OTP attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/verify/phone/resend/:
    post:
      summary: Resend phone verification OTP
      tags: [Verification]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OTP sent to your phone"
        '400':
          description: Phone already verified or no phone number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/me/:
    get:
      summary: Retrieve current user profile
      tags: [User Management]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      summary: Update current user profile
      tags: [User Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
            example:
              full_name: "John Updated Smith"
              email: "newemail@example.com"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email or phone already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/accounts/deactivate/:
    post:
      summary: Deactivate user account (soft delete)
      tags: [User Management]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: Current password for confirmation
                reason:
                  type: string
                  description: Optional reason for deactivation
                  maxLength: 500
              required: [password]
            example:
              password: "CurrentPassword123!"
              reason: "No longer need the service"
      responses:
        '204':
          description: Account deactivated successfully
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        version:
          type: string
          example: "2.0.0"
        services:
          type: object
          properties:
            database:
              type: string
              example: "connected"
            email:
              type: string
              example: "connected"
            sms:
              type: string
              example: "connected"

    UserRegistration:
      type: object
      required: [password, full_name]
      properties:
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number in E.164 international format
          example: "+27123456789"
        email:
          type: string
          format: email
          maxLength: 254
          description: Valid email address
          example: "user@example.com"
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-Z\s\-\'\.]+$'
          description: Full name (letters, spaces, hyphens, apostrophes, periods only)
          example: "John Doe"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: |
            Password requirements:
            - At least 8 characters long
            - Must contain at least one uppercase letter
            - Must contain at least one lowercase letter  
            - Must contain at least one digit
            - Must contain at least one special character (!@#$%^&*(),.?\":{}|<>)
          example: "SecurePass123!"
      description: Must provide at least one of phone_number or email.

    UserLogin:
      type: object
      required: [password]
      properties:
        phone:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Phone number in E.164 format
          example: "+27123456789"
        email:
          type: string
          format: email
          description: Email address
          example: "user@example.com"
        password:
          type: string
          description: User password
          example: "SecurePass123!"
      description: Must provide either phone or email with password.

    PasswordChange:
      type: object
      required: [current_password, new_password]
      properties:
        current_password:
          type: string
          description: Current password
          example: "OldPassword123!"
        new_password:
          type: string
          minLength: 8
          maxLength: 128
          description: New password meeting security requirements
          example: "NewSecurePass456!"

    PasswordResetConfirm:
      type: object
      required: [token, new_password]
      properties:
        token:
          type: string
          description: Password reset token received via email/SMS
          example: "abc123def456"
        new_password:
          type: string
          minLength: 8
          maxLength: 128
          description: New password meeting security requirements
          example: "NewSecurePass789!"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 12345
        phone_number:
          type: string
          description: User's phone number
          example: "+27123456789"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        full_name:
          type: string
          description: User's full name
          example: "John Doe"
        role:
          type: string
          enum: [user, admin, moderator]
          readOnly: true
          description: User role
          example: "user"
        is_verified:
          type: boolean
          readOnly: true
          description: Whether user account is verified
          example: true
        email_verified:
          type: boolean
          readOnly: true
          description: Whether email is verified
          example: true
        phone_verified:
          type: boolean
          readOnly: true
          description: Whether phone is verified
          example: false
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Account creation timestamp
          example: "2024-01-15T10:30:00Z"
        last_login:
          type: string
          format: date-time
          readOnly: true
          description: Last login timestamp
          example: "2024-01-15T14:22:00Z"

    UserProfileUpdate:
      type: object
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          pattern: '^[a-zA-Z\s\-\'\.]+$'
          description: Updated full name
          example: "John Updated Smith"
        email:
          type: string
          format: email
          maxLength: 254
          description: Updated email address (will require re-verification)
          example: "newemail@example.com"
        phone_number:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Updated phone number (will require re-verification)
          example: "+27987654321"

    RegistrationResponse:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully. Please verify your email/phone."
        user_id:
          type: integer
          example: 12345
        verification_required:
          type: array
          items:
            type: string
            enum: [email, phone]
          example: ["email"]

    LoginResponse:
      type: object
      properties:
        access:
          type: string
          description: JWT access token
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        refresh:
          type: string
          description: JWT refresh token
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/UserProfile'

    TokenRefreshResponse:
      type: object
      properties:
        access:
          type: string
          description: New JWT access token
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 3600

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code for programmatic handling
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid email or password"
            details:
              type: string
              description: Additional error details (optional)
              example: "Account may be deactivated"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          example: "/api/accounts/login/"
        request_id:
          type: string
          description: Unique request identifier for tracking
          example: "req_123456789"

    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Validation failed"
            fields:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                password: ["Password must contain at least one uppercase letter"]
                email: ["Enter a valid email address"]
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          example: "/api/accounts/register/"
        request_id:
          type: string
          example: "req_123456789"

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and session management
  - name: Password Management
    description: Password change and reset functionality
  - name: Verification
    description: Email and phone verification
  - name: User Management
    description: User profile and account management